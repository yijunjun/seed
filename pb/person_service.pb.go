// Code generated by protoc-gen-go. DO NOT EDIT.
// source: person_service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IdRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdRequest) Reset()                    { *m = IdRequest{} }
func (m *IdRequest) String() string            { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()               {}
func (*IdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *IdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IdListRequest struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *IdListRequest) Reset()                    { *m = IdListRequest{} }
func (m *IdListRequest) String() string            { return proto.CompactTextString(m) }
func (*IdListRequest) ProtoMessage()               {}
func (*IdListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *IdListRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type NameListRequest struct {
	Perfix []string `protobuf:"bytes,1,rep,name=perfix" json:"perfix,omitempty"`
}

func (m *NameListRequest) Reset()                    { *m = NameListRequest{} }
func (m *NameListRequest) String() string            { return proto.CompactTextString(m) }
func (*NameListRequest) ProtoMessage()               {}
func (*NameListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *NameListRequest) GetPerfix() []string {
	if m != nil {
		return m.Perfix
	}
	return nil
}

func init() {
	proto.RegisterType((*IdRequest)(nil), "pb.IdRequest")
	proto.RegisterType((*IdListRequest)(nil), "pb.IdListRequest")
	proto.RegisterType((*NameListRequest)(nil), "pb.NameListRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PersonService service

type PersonServiceClient interface {
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Person, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Person, error)
	Add(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	Update(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	List(ctx context.Context, in *IdListRequest, opts ...grpc.CallOption) (*PersonList, error)
	SearchByName(ctx context.Context, in *NameListRequest, opts ...grpc.CallOption) (*PersonList, error)
}

type personServiceClient struct {
	cc *grpc.ClientConn
}

func NewPersonServiceClient(cc *grpc.ClientConn) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/pb.PersonService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/pb.PersonService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) Add(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/pb.PersonService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) Update(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/pb.PersonService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) List(ctx context.Context, in *IdListRequest, opts ...grpc.CallOption) (*PersonList, error) {
	out := new(PersonList)
	err := grpc.Invoke(ctx, "/pb.PersonService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) SearchByName(ctx context.Context, in *NameListRequest, opts ...grpc.CallOption) (*PersonList, error) {
	out := new(PersonList)
	err := grpc.Invoke(ctx, "/pb.PersonService/SearchByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersonService service

type PersonServiceServer interface {
	Get(context.Context, *IdRequest) (*Person, error)
	Delete(context.Context, *IdRequest) (*Person, error)
	Add(context.Context, *Person) (*Person, error)
	Update(context.Context, *Person) (*Person, error)
	List(context.Context, *IdListRequest) (*PersonList, error)
	SearchByName(context.Context, *NameListRequest) (*PersonList, error)
}

func RegisterPersonServiceServer(s *grpc.Server, srv PersonServiceServer) {
	s.RegisterService(&_PersonService_serviceDesc, srv)
}

func _PersonService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Add(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Update(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).List(ctx, req.(*IdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_SearchByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).SearchByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PersonService/SearchByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).SearchByName(ctx, req.(*NameListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PersonService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PersonService_Delete_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _PersonService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PersonService_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PersonService_List_Handler,
		},
		{
			MethodName: "SearchByName",
			Handler:    _PersonService_SearchByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person_service.proto",
}

func init() { proto.RegisterFile("person_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x69, 0x23, 0x81, 0x1d, 0xb6, 0x2b, 0x8e, 0x22, 0x52, 0x11, 0xcb, 0x7a, 0xb1, 0x97,
	0x1e, 0xec, 0x2f, 0x50, 0x04, 0x29, 0x88, 0x48, 0x8b, 0x67, 0x69, 0x9b, 0x11, 0x03, 0x6a, 0x63,
	0x12, 0x45, 0x7f, 0xb9, 0x57, 0x49, 0x52, 0xb4, 0x16, 0xdc, 0xe3, 0xcc, 0xfb, 0x86, 0x79, 0xef,
	0xc1, 0x9e, 0x22, 0x6d, 0x86, 0x97, 0x7b, 0x43, 0xfa, 0x5d, 0xf6, 0x54, 0x28, 0x3d, 0xd8, 0x01,
	0x63, 0xd5, 0xa5, 0xcb, 0xa0, 0x84, 0xcd, 0xfa, 0x10, 0x16, 0x95, 0xa8, 0xe9, 0xf5, 0x8d, 0x8c,
	0xc5, 0x15, 0xc4, 0x52, 0x1c, 0x44, 0x59, 0x74, 0xca, 0xea, 0x58, 0x8a, 0xf5, 0x31, 0x24, 0x95,
	0xb8, 0x96, 0xc6, 0xce, 0x01, 0x36, 0x02, 0x39, 0x6c, 0xdf, 0xb4, 0xcf, 0x34, 0x45, 0xf6, 0x81,
	0x2b, 0xd2, 0x0f, 0xf2, 0xc3, 0x63, 0x8b, 0x7a, 0x9c, 0xce, 0xbe, 0x22, 0x48, 0x6e, 0xfd, 0xe7,
	0x26, 0x58, 0xc2, 0x0c, 0xd8, 0x15, 0x59, 0x4c, 0x0a, 0xd5, 0x15, 0x3f, 0x1e, 0x52, 0x70, 0x63,
	0x00, 0xf1, 0x04, 0xf8, 0x25, 0x3d, 0x91, 0xa5, 0x4d, 0xd0, 0x11, 0xb0, 0x73, 0x21, 0x70, 0xb2,
	0xfa, 0x23, 0x67, 0xc0, 0xef, 0x94, 0x68, 0x2d, 0xfd, 0x4b, 0xe4, 0xb0, 0xe5, 0x02, 0xe0, 0x4e,
	0xf8, 0x31, 0x09, 0x93, 0xae, 0x7e, 0x31, 0x8f, 0x94, 0xb0, 0x6c, 0xa8, 0xd5, 0xfd, 0xe3, 0xc5,
	0xa7, 0xcb, 0x8d, 0xbb, 0x4e, 0x9f, 0x35, 0x30, 0x3f, 0xea, 0xb8, 0x6f, 0xba, 0xfc, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x7a, 0x1f, 0x7b, 0x3b, 0x93, 0x01, 0x00, 0x00,
}
